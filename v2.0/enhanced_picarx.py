"""
Enhanced PicarX class for Nevil 2.0
Addresses servo calibration and configuration persistence issues
"""

import os
import time
import stat
from .picarx import Picarx
from robot_hat import reset_mcu

try:
    from robot_hat import fileDB
except ImportError:
    fileDB = None


class EnhancedPicarx(Picarx):
    """
    Enhanced PicarX class that ensures proper hardware permissions
    and configuration persistence for Nevil 2.0
    """
    
    def __init__(self, *args, **kwargs):
        # Validate hardware access before initialization
        self._validate_hardware_access()
        
        # Ensure configuration file exists and is accessible
        self._ensure_config_file()
        
        # Initialize parent class
        super().__init__(*args, **kwargs)
        
        # Verify servo calibration was applied correctly
        self._verify_servo_calibration()
    
    def _validate_hardware_access(self):
        """Validate that we have proper hardware access permissions"""
        
        # Check GPIO access
        gpio_devices = ['/dev/gpiomem', '/dev/mem']
        gpio_accessible = False
        
        for device in gpio_devices:
            if os.path.exists(device) and os.access(device, os.R_OK | os.W_OK):
                gpio_accessible = True
                break
        
        if not gpio_accessible:
            raise PermissionError(
                "Insufficient GPIO permissions. "
                "Run with sudo or ensure user is in gpio group."
            )
        
        # Check I2C access
        i2c_device = '/dev/i2c-1'
        if os.path.exists(i2c_device) and not os.access(i2c_device, os.R_OK | os.W_OK):
            raise PermissionError(
                f"Cannot access I2C device: {i2c_device}. "
                "Run with sudo or ensure user is in i2c group."
            )
        
        print("‚úÖ Hardware permissions validated")
    
    def _ensure_config_file(self):
        """Ensure configuration file exists and is accessible"""
        config_path = '/opt/picar-x/picar-x.conf'
        
        # Create directory if it doesn't exist
        config_dir = os.path.dirname(config_path)
        if not os.path.exists(config_dir):
            try:
                os.makedirs(config_dir, mode=0o755)
                print(f"‚úÖ Created config directory: {config_dir}")
            except PermissionError:
                raise PermissionError(
                    f"Cannot create config directory: {config_dir}. "
                    "Run with sudo."
                )
        
        # Create config file if it doesn't exist
        if not os.path.exists(config_path):
            try:
                self._create_default_config(config_path)
                print(f"‚úÖ Created default config file: {config_path}")
            except PermissionError:
                raise PermissionError(
                    f"Cannot create config file: {config_path}. "
                    "Run with sudo."
                )
        
        # Verify config file is accessible
        if not os.access(config_path, os.R_OK | os.W_OK):
            try:
                # Try to fix permissions
                os.chmod(config_path, 0o666)
                print(f"‚úÖ Fixed config file permissions: {config_path}")
            except PermissionError:
                raise PermissionError(
                    f"Cannot access config file: {config_path}. "
                    "Run with sudo or fix file permissions."
                )
    
    def _create_default_config(self, config_path):
        """Create a default configuration file"""
        default_config = {
            'picarx_dir_servo': '0',
            'picarx_cam_pan_servo': '0', 
            'picarx_cam_tilt_servo': '0',
            'picarx_dir_motor': '[1, 1]',
            'line_reference': '[1000, 1000, 1000]',
            'cliff_reference': '[500, 500, 500]'
        }
        
        with open(config_path, 'w') as f:
            f.write("# PiCar-X Configuration File\n")
            f.write("# Generated by Enhanced PicarX\n\n")
            for key, value in default_config.items():
                f.write(f"{key}={value}\n")
        
        # Set appropriate permissions
        os.chmod(config_path, 0o666)
    
    def _verify_servo_calibration(self):
        """Verify that servo calibration values were applied correctly"""
        print("üîç Verifying servo calibration...")
        
        # Check if calibration values are reasonable
        if hasattr(self, 'dir_cali_val'):
            if abs(self.dir_cali_val) > 45:
                print(f"‚ö†Ô∏è  Direction servo calibration seems extreme: {self.dir_cali_val}")
            else:
                print(f"‚úÖ Direction servo calibration: {self.dir_cali_val}")
        
        if hasattr(self, 'cam_pan_cali_val'):
            if abs(self.cam_pan_cali_val) > 90:
                print(f"‚ö†Ô∏è  Camera pan calibration seems extreme: {self.cam_pan_cali_val}")
            else:
                print(f"‚úÖ Camera pan calibration: {self.cam_pan_cali_val}")
        
        if hasattr(self, 'cam_tilt_cali_val'):
            if abs(self.cam_tilt_cali_val) > 90:
                print(f"‚ö†Ô∏è  Camera tilt calibration seems extreme: {self.cam_tilt_cali_val}")
            else:
                print(f"‚úÖ Camera tilt calibration: {self.cam_tilt_cali_val}")
    
    def recalibrate_direction_servo(self, value=0):
        """
        Recalibrate the direction servo and persist the value
        
        Args:
            value (float): Calibration value in degrees (-45 to 45)
        """
        if not -45 <= value <= 45:
            raise ValueError("Calibration value must be between -45 and 45 degrees")
        
        print(f"üîß Recalibrating direction servo to: {value}")
        
        # Apply calibration
        self.dir_servo_calibrate(value)
        
        # Verify it was applied
        if hasattr(self, 'dir_cali_val') and abs(self.dir_cali_val - value) < 0.1:
            print(f"‚úÖ Direction servo calibration successful: {self.dir_cali_val}")
            return True
        else:
            print(f"‚ùå Direction servo calibration failed")
            return False
    
    def reset_to_neutral(self):
        """Reset all servos to neutral position with calibration applied"""
        print("üîÑ Resetting servos to neutral position...")
        
        try:
            # Reset direction servo to straight
            self.set_dir_servo_angle(0)
            
            # Reset camera to center
            self.set_cam_pan_angle(0)
            self.set_cam_tilt_angle(0)
            
            print("‚úÖ Servos reset to neutral position")
            
        except Exception as e:
            print(f"‚ùå Error resetting servos: {e}")
            raise
    
    def diagnose_servo_issue(self):
        """Diagnose potential servo calibration issues"""
        print("\nüîç Diagnosing servo configuration...")
        
        # Check configuration file access
        config_path = '/opt/picar-x/picar-x.conf'
        if os.path.exists(config_path):
            print(f"‚úÖ Config file exists: {config_path}")
            
            # Check permissions
            stat_info = os.stat(config_path)
            permissions = oct(stat_info.st_mode)[-3:]
            print(f"üìã Config file permissions: {permissions}")
            
            # Check if we can read the file
            try:
                with open(config_path, 'r') as f:
                    content = f.read()
                    if 'picarx_dir_servo' in content:
                        print("‚úÖ Direction servo config found in file")
                    else:
                        print("‚ùå Direction servo config missing from file")
            except Exception as e:
                print(f"‚ùå Cannot read config file: {e}")
        else:
            print(f"‚ùå Config file missing: {config_path}")
        
        # Check current calibration values
        print(f"üìä Current calibration values:")
        print(f"   Direction servo: {getattr(self, 'dir_cali_val', 'Unknown')}")
        print(f"   Camera pan: {getattr(self, 'cam_pan_cali_val', 'Unknown')}")
        print(f"   Camera tilt: {getattr(self, 'cam_tilt_cali_val', 'Unknown')}")
        
        # Check if fileDB is working
        if fileDB is not None:
            print("‚úÖ fileDB module available")
        else:
            print("‚ùå fileDB module not available - using fallback")
        
        return {
            'config_file_exists': os.path.exists(config_path),
            'config_readable': os.access(config_path, os.R_OK) if os.path.exists(config_path) else False,
            'config_writable': os.access(config_path, os.W_OK) if os.path.exists(config_path) else False,
            'filedb_available': fileDB is not None,
            'dir_calibration': getattr(self, 'dir_cali_val', None),
            'pan_calibration': getattr(self, 'cam_pan_cali_val', None),
            'tilt_calibration': getattr(self, 'cam_tilt_cali_val', None)
        }


def create_enhanced_picarx(*args, **kwargs):
    """
    Factory function to create an Enhanced PicarX instance
    with proper error handling and diagnostics
    """
    try:
        print("ü§ñ Initializing Enhanced PicarX...")
        car = EnhancedPicarx(*args, **kwargs)
        print("‚úÖ Enhanced PicarX initialized successfully")
        return car
        
    except PermissionError as e:
        print(f"‚ùå Permission Error: {e}")
        print("üí° Try running with sudo: sudo python3 your_script.py")
        raise
        
    except Exception as e:
        print(f"‚ùå Initialization Error: {e}")
        print("üîç Running diagnostics...")
        
        # Try to create a basic instance for diagnostics
        try:
            basic_car = Picarx(*args, **kwargs)
            basic_car.diagnose_servo_issue()
        except:
            print("‚ùå Cannot create even basic PicarX instance")
        
        raise


if __name__ == "__main__":
    # Test the enhanced PicarX
    try:
        car = create_enhanced_picarx()
        
        # Run diagnostics
        diagnosis = car.diagnose_servo_issue()
        print(f"\nüìä Diagnosis results: {diagnosis}")
        
        # Test servo reset
        car.reset_to_neutral()
        
        # Test calibration
        print("\nüß™ Testing calibration...")
        car.recalibrate_direction_servo(0)  # Reset to center
        
        print("\n‚úÖ Enhanced PicarX test completed successfully")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")